#!/usr/bin/python3

"""
Last update: April 2021
Author: Luigi D'Ascenzo, PhD - The Scripps Research Institute, La Jolla (CA)
Contact info: dascenzoluigi@gmail.com
GitHub project repository: https://github.com/ldascenzo/pytheas

***DESCRIPTION***
Pytheas statistical analysis tools. Given information on target and decoy sequences (obtained from the matching and
scoring step), relevant statistical plots are generated. More information on the parameters and the output plots
can be found in the Pytheas manual.
"""

from gooey import Gooey, GooeyParser
from statistics_library import Stats


@Gooey(dump_build_config=True, program_name='Pytheas descriptive statistical plots', default_size=(1920, 1080))
def statistical_plots():
    description = 'Generate the relevant statistical plots for data quality assessment'
    parser = GooeyParser(description=description)

    # Required arguments
    parser.add_argument('Targets', widget="FileChooser",
                        help='Input csv file containing target sequences (targets_[dataset])')
    parser.add_argument('Decoys', widget="FileChooser",
                        help='Input csv file containing decoy sequences (decoys_[dataset])')
    parser.add_argument('Match_output', widget="FileChooser",
                        help="File (txt) generated by the Pytheas matching and scoring algorithm")

    # Optional Arguments
    parser.add_argument('--isotopic_species', default='all', choices=['light', 'heavy', 'all'],
                        help='Isotopically labeled (heavy) or unlabeled (light) sequences to include in the '
                             'statistical plots. By default, both are included')
    parser.add_argument('--Sp_cutoff', default=0, type=float,
                        help='Sp score minimum cutoff to select target sequences for the statistical plots')
    parser.add_argument('--targets_without_decoys', action='store_true', default=False,
                        help='Use targets without any competing decoy for the statistical plots')
    parser.add_argument('--hide_box_graphs', action='store_true', default=False,
                        help='Hide green boxes with info (statistics, parameters...) on the plots')
    parser.add_argument('--scatterplot_Sp_vs_dSp', action='store_true', default=False,
                        help='Generate an additional scatter plot with Sp scores vs dSp for targets/decoys')
    parser.add_argument('--scatterbox_length_charge', action='store_true', default=False,
                        help='Generate a scatterplot/boxplot of the distribution of Sp scores vs length&charge for'
                             'targets/decoys')
    parser.add_argument('--MS1_offset_min', default=None, type=int,
                        help='Minimum MS1 matching offset (ppm) for selection of targets to populate the offset'
                             'distribution histogram')
    parser.add_argument('--MS1_offset_max', default=None, type=int,
                        help='Maximum MS1 matching offset (ppm) for selection of targets to populate the offset'
                             'distribution histogram')
    parser.add_argument('--FDR_input', default=None, widget="FileChooser",
                        help='FDR analysis file use to draw FDR lines on certain statistical plots')
    parser.add_argument('--FDR_line_value', default=None, type=float,
                        help='FDR (%) threshold to show as line on certain statistical plots')

    ####################################################
    args = parser.parse_args()

    statistics = Stats(args.Targets, args.Decoys, args.Match_output, args.isotopic_species, args.FDR_input,
                       args.FDR_line_value, args.Sp_cutoff, args.targets_without_decoys,
                       args.hide_box_graphs, args.MS1_offset_min, args.MS1_offset_max,
                       args.scatterplot_Sp_vs_dSp, args.scatterbox_length_charge)

    statistics.final_output()


if __name__ == '__main__':
    statistical_plots()
