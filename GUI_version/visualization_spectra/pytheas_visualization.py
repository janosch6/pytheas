#!/usr/bin/python3

"""
Last update: April 2021
Author: Luigi D'Ascenzo, PhD - The Scripps Research Institute, La Jolla (CA)
Contact info: dascenzoluigi@gmail.com
GitHub project repository: https://github.com/ldascenzo/pytheas

***DESCRIPTION***
Pytheas visualization algorithm.
Additional information on the output files and the parameters can be found in the Matching&Scoring section of the
Pytheas manual

***OUTPUT***
1) visualization_output -> html file containing a table with all the visualized targets/decoys and the spectra
"""

from gooey import Gooey, GooeyParser
from visualization_library import Visualize


@Gooey(dump_build_config=True, program_name='Pytheas visualization of annotated spectra',
       default_size=(1920, 1080))
def visualizer():
    description = 'Generate an output table with target/decoys information and visualized annotated spectra'
    parser = GooeyParser(description=description)

    # Required arguments
    parser.add_argument('Theoretical_digest', widget="FileChooser", help='Input file obtained from the Pytheas '
                                                                         'in silico digestion workflow')
    parser.add_argument('Input_mgf', widget="FileChooser", help='Experimental measured peaks in mgf file format')
    parser.add_argument('Match_file', widget="FileChooser", help='File (txt) generated by the Pytheas matching '
                                                                 'and scoring algorithm (match_output_[dataset])')

    # Optional arguments
    parser.add_argument('--visualize_decoys', action='store_true', default=False,
                        help='Visualize decoy sequences')
    parser.add_argument('--modified_only', action='store_true', default=False,
                        help='Visualize only spectra for targets/decoys containing nucleotide modifications')
    parser.add_argument('--only_unique_positions', action='store_true', default=False,
                        help='Visualize only target/decoy sequences mapping to unique sequence positions')
    parser.add_argument('--remove_redundant_sequences_with_X', action='store_true', default=False,
                        help='Remove redundant matches containing X, keeping only the highest ranking')
    parser.add_argument('--max_rank', default=99, type=int,
                        help='Maximum rank value for target/decoy sequences (default=99[all]')
    parser.add_argument('--Sp_minimum_cutoff', default=0, type=float,
                        help='Minimum Sp score cutoff for target/decoy sequences (default=0)')
    parser.add_argument('--dSp_maximum_cutoff', default=1, type=float,
                        help='Maximum dSp score cutoff for target/decoy sequences (default=1)')
    parser.add_argument('--dSp2_minimum_cutoff', default=0, type=float,
                        help='Minimum dSp2 score cutoff for target/decoy sequences (default=0)')
    parser.add_argument('--MS1_offset_cutoff', default=None, type=float,
                        help='Maximum MS1 matching offset (ppm) value for target/decoy sequences. It applies to '
                             'positive and negative values (default=no cutoff)')
    parser.add_argument('--highest_peaks', default='all',
                        help='Number of most intense MS2 ions peaks to be shown')
    parser.add_argument('--mz_min', default=None, type=int, help='Minimum m/z value to define the lower value of the '
                                                            'spectra m/z window to be plotted (default=based on mgf)')
    parser.add_argument('--mz_max', default=None, type=int, help='Maximum m/z value to define the higher value of the '
                                                            'spectra m/z window to be plotted (default=based on mgf)')

    ####################################################
    args = parser.parse_args()

    visualization = Visualize(args.Theoretical_digest, args.Input_mgf, args.Match_file, args.highest_peaks,
                              args.mz_min, args.mz_max, args.Sp_minimum_cutoff,
                              args.dSp_maximum_cutoff, args.visualize_decoys, args.modified_only, args.max_rank,
                              args.only_unique_positions, args.remove_redundant_sequences_with_X,
                              args.dSp2_minimum_cutoff, args.MS1_offset_cutoff)

    visualization.final_output()


if __name__ == '__main__':
    visualizer()
